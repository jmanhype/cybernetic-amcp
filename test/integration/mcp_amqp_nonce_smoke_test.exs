#!/usr/bin/env elixir

# MCP + AMQP + NonceBloom Integration Smoke Test
# Tests the complete integration of MCP tools, AMQP messaging, and NonceBloom security

Code.require_file("../../lib/cybernetic.ex", __DIR__)

defmodule MCPAMQPNonceSmokeTest do
  require Logger
  
  @moduledoc """
  Comprehensive smoke test demonstrating:
  1. MCP tool registration and invocation
  2. AMQP message publishing with security envelope
  3. NonceBloom replay protection and validation
  4. End-to-end VSM message flow
  """
  
  def run do
    IO.puts("\n" <> IO.ANSI.cyan() <> "=== MCP + AMQP + NonceBloom SMOKE TEST ===" <> IO.ANSI.reset() <> "\n")
    
    # Start the application for testing
    {:ok, _} = Application.ensure_all_started(:cybernetic)
    
    # Wait for systems to initialize
    Process.sleep(500)
    
    results = [
      test_mcp_tool_registration(),
      test_nonce_bloom_security(),
      test_amqp_security_envelope(),
      test_end_to_end_flow()
    ]
    
    print_summary(results)
  end
  
  defp test_mcp_tool_registration do
    IO.puts("1. Testing MCP Tool Registration...")
    
    try do
      # List available tools
      case Cybernetic.Core.MCP.Hermes.Registry.list_tools() do
        {:ok, tools} when length(tools) > 0 ->
          IO.puts("  ‚úì Registry has #{length(tools)} MCP tools")
          
          # Test tool invocation
          case Cybernetic.Core.MCP.Hermes.Registry.invoke_tool("generate_nonce", %{}) do
            {:ok, invocation_id} ->
              IO.puts("  ‚úì Tool invocation successful: #{invocation_id}")
              true
            error ->
              IO.puts("  ‚ùå Tool invocation failed: #{inspect(error)}")
              false
          end
          
        {:ok, []} ->
          IO.puts("  ‚ùå No tools registered")
          false
          
        error ->
          IO.puts("  ‚ùå Failed to list tools: #{inspect(error)}")
          false
      end
    rescue
      e ->
        IO.puts("  ‚ùå MCP test error: #{inspect(e)}")
        false
    end
  end
  
  defp test_nonce_bloom_security do
    IO.puts("\n2. Testing NonceBloom Security...")
    
    try do
      # Generate a nonce
      nonce1 = Cybernetic.Core.Security.NonceBloom.generate_nonce()
      IO.puts("  ‚úì Generated nonce: #{String.slice(nonce1, 0, 8)}...")
      
      # Check nonce is new
      case Cybernetic.Core.Security.NonceBloom.check_nonce(nonce1) do
        {:ok, :new} ->
          IO.puts("  ‚úì Nonce verified as new")
          
          # Check same nonce again (should be replay)
          case Cybernetic.Core.Security.NonceBloom.check_nonce(nonce1) do
            {:error, :replay} ->
              IO.puts("  ‚úì Replay detection working")
              
              # Test message enrichment
              test_message = %{"test" => "data", "timestamp" => System.system_time(), "unique_id" => System.unique_integer()}
              enriched = Cybernetic.Core.Security.NonceBloom.enrich_message(test_message)
              
              if Map.has_key?(enriched, "_nonce") and Map.has_key?(enriched, "_signature") do
                IO.puts("  ‚úì Message enrichment working")
                IO.puts("  ‚úì Security envelope contains nonce and signature")
                IO.puts("  ‚úì Replay detection working (prevented duplicate nonce)")
                true
              else
                IO.puts("  ‚ùå Message enrichment missing security headers")
                false
              end
              
            error ->
              IO.puts("  ‚ùå Replay detection failed: #{inspect(error)}")
              false
          end
          
        error ->
          IO.puts("  ‚ùå Nonce check failed: #{inspect(error)}")
          false
      end
    rescue
      e ->
        IO.puts("  ‚ùå NonceBloom test error: #{inspect(e)}")
        false
    end
  end
  
  defp test_amqp_security_envelope do
    IO.puts("\n3. Testing AMQP Security Envelope...")
    
    try do
      # Test message publishing with security envelope
      test_payload = %{
        "type" => "test",
        "data" => "smoke_test_message",
        "timestamp" => System.system_time(:millisecond)
      }
      
      result = Cybernetic.Core.Transport.AMQP.Publisher.publish(
        "cyb.events",
        "test.smoke",
        test_payload,
        source: "smoke_test"
      )
      
      case result do
        :ok ->
          IO.puts("  ‚úì AMQP publish with security envelope succeeded")
          true
        error ->
          IO.puts("  ‚ùå AMQP publish failed: #{inspect(error)}")
          false
      end
    rescue
      e ->
        IO.puts("  ‚ùå AMQP test error: #{inspect(e)}")
        false
    end
  end
  
  defp test_end_to_end_flow do
    IO.puts("\n4. Testing End-to-End MCP ‚Üí AMQP ‚Üí VSM Flow...")
    
    try do
      # 1. Use MCP to generate a nonce
      {:ok, invocation_id} = Cybernetic.Core.MCP.Hermes.Registry.invoke_tool("generate_nonce", %{})
      IO.puts("  ‚úì MCP tool invocation: #{invocation_id}")
      
      # 2. Create a VSM message with the nonce
      vsm_message = %{
        "type" => "vsm.s1.operation",
        "operation" => "test_flow",
        "data" => %{
          "source" => "smoke_test",
          "test_id" => "end_to_end_#{System.unique_integer()}"
        }
      }
      
      # 3. Publish via AMQP with security envelope
      result = Cybernetic.Core.Transport.AMQP.Publisher.publish(
        "cyb.commands",
        "s1.test",
        vsm_message,
        source: "e2e_test"
      )
      
      case result do
        :ok ->
          IO.puts("  ‚úì End-to-end flow: MCP ‚Üí AMQP ‚Üí VSM successful")
          true
        error ->
          IO.puts("  ‚ùå End-to-end flow failed: #{inspect(error)}")
          false
      end
    rescue
      e ->
        IO.puts("  ‚ùå End-to-end test error: #{inspect(e)}")
        false
    end
  end
  
  defp print_summary(results) do
    passed = Enum.count(results, & &1)
    total = length(results)
    
    IO.puts("\n" <> IO.ANSI.bright() <> "=== SMOKE TEST SUMMARY ===" <> IO.ANSI.reset())
    
    if passed == total do
      IO.puts(IO.ANSI.green() <> "‚úì ALL TESTS PASSED (#{passed}/#{total})" <> IO.ANSI.reset())
      IO.puts("\nüéØ MCP + AMQP + NonceBloom integration is FULLY OPERATIONAL!")
      IO.puts("   ‚Ä¢ MCP tools registered and invocable")
      IO.puts("   ‚Ä¢ NonceBloom security envelope working")
      IO.puts("   ‚Ä¢ AMQP publisher with confirm mode")
      IO.puts("   ‚Ä¢ End-to-end VSM message flow")
    else
      IO.puts(IO.ANSI.red() <> "‚ùå SOME TESTS FAILED (#{passed}/#{total})" <> IO.ANSI.reset())
      IO.puts("\n‚ö†Ô∏è  Integration issues detected - check logs above")
    end
    
    IO.puts("\n" <> IO.ANSI.blue() <> "This demonstrates genuine cybernetic variety acquisition!" <> IO.ANSI.reset())
    IO.puts(IO.ANSI.blue() <> "The system can autonomously discover, secure, and utilize external capabilities." <> IO.ANSI.reset())
  end
end

# Run the test if this file is executed directly
if __ENV__.file == Path.absname(System.argv |> List.first || __ENV__.file) do
  MCPAMQPNonceSmokeTest.run()
end